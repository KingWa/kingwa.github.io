<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Hacking For Fun]]></title>
  <link href="http://KingWa.github.io/atom.xml" rel="self"/>
  <link href="http://KingWa.github.io/"/>
  <updated>2014-04-30T23:28:53+08:00</updated>
  <id>http://KingWa.github.io/</id>
  <author>
    <name><![CDATA[KingWah]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Share Code Snippets]]></title>
    <link href="http://KingWa.github.io/blog/2014/04/29/share-code-snippets/"/>
    <updated>2014-04-29T21:32:59+08:00</updated>
    <id>http://KingWa.github.io/blog/2014/04/29/share-code-snippets</id>
    <content type="html"><![CDATA[<p>Ways to share code snippets in Octopress:</p>

<h2 id="use-the-pygments-highlight">Use the pygment’s highlight</h2>
<p>The syntax is: </p>

<pre><code>{% highlight language linenos %}
{% endhighlight %}
</code></pre>

<p>where language is the pygment’s supporting <a href="http://www.pygments.org/languages">language</a>, linenos(optional) means showing line number.</p>

<p>For example, bellow:</p>

<pre><code>{% highlight c %}
int main(int argc, char* argv[])
{
    printf("Hello, world!\n");
    return 0;
}
{% endhighlight %}
</code></pre>

<p>shows:</p>
<div>
  <pre><code class="c">int main(int argc, char* argv[])
{
    printf(&quot;Hello, world!\n&quot;);
    return 0;
}</code></pre>
</div>

<h2 id="simply-use-markdown">Simply use markdown</h2>
<p>To produce a code block in Markdown, simply indent every line of the block by at least 4 spaces or 1 tab.
Such as:
    int main(int argc, char* argv[])
    {
        printf(“Hello, world!\n”);
        return 0;
    }</p>

<h2 id="backtick-code-blocks">Backtick Code Blocks</h2>
<p>Syntax:</p>

<pre><code>``` [language] [title] [url] [link text] [linenos:false] [start:#] [mark:#,#-#]
code snippet
```
</code></pre>

<p>For example, bellow:</p>

<pre><code>``` 
int main(int argc, char* argv[])
{
    printf("%s\n", "Hello, world!");
    return 0;
}
```
</code></pre>

<p>shows:
&lt;div class=&#8217;bogus-wrapper&#8217;&gt;<notextile><figure class="code">&lt;div class=&#8221;highlight&#8221;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#8221;gutter&#8221;&gt;&lt;pre class=&#8221;line-numbers&#8221;&gt;<span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#8217;code&#8217;&gt;&lt;pre&gt;<code class=""><span class="line">int main(int argc, char* argv[])
</span><span class="line">{
</span><span class="line">    printf("%s\n", "Hello, world!");
</span><span class="line">    return 0;
</span><span class="line">}</span></code>&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;</figure></notextile>&lt;/div&gt;</p>

<p>and </p>

<pre><code>``` c  
int main(int argc, char* argv[])
{
    printf("%s\n", "Hello, world!");
    return 0;
}
```
</code></pre>

<p>shows:
&lt;div class=&#8217;bogus-wrapper&#8217;&gt;<notextile><figure class="code">&lt;figcaption&gt;<span></span>&lt;/figcaption&gt;&lt;div class=&#8221;highlight&#8221;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#8221;gutter&#8221;&gt;&lt;pre class=&#8221;line-numbers&#8221;&gt;<span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#8217;code&#8217;&gt;&lt;pre&gt;<code class="c"><span class="line"><span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span><span class="o">*</span> <span class="n">argv</span><span class="p">[])</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">    <span class="n">printf</span><span class="p">(</span><span class="s">&quot;%s</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="s">&quot;Hello, world!&quot;</span><span class="p">);</span>
</span><span class="line">    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class="line"><span class="p">}</span>
</span></code>&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;</figure></notextile>&lt;/div&gt;</p>

<p>and</p>

<pre><code>``` c "Hello World.cpp" mark:3 
int main(int argc, char* argv[])
{
    printf("%s\n", "Hello, world!");
    return 0;
}
```
</code></pre>

<p>shows:
&lt;div class=&#8217;bogus-wrapper&#8217;&gt;<notextile><figure class="code">&lt;figcaption&gt;<span>&#8220;Hello World.cpp&#8221; mark:3 </span>&lt;/figcaption&gt;&lt;div class=&#8221;highlight&#8221;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#8221;gutter&#8221;&gt;&lt;pre class=&#8221;line-numbers&#8221;&gt;<span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#8217;code&#8217;&gt;&lt;pre&gt;<code class="c"><span class="line"><span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span><span class="o">*</span> <span class="n">argv</span><span class="p">[])</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">    <span class="n">printf</span><span class="p">(</span><span class="s">&quot;%s</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="s">&quot;Hello, world!&quot;</span><span class="p">);</span>
</span><span class="line">    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class="line"><span class="p">}</span>
</span></code>&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;</figure></notextile>&lt;/div&gt;</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Support LaTex in Octopress]]></title>
    <link href="http://KingWa.github.io/blog/2014/04/26/support-latex-in-octopress/"/>
    <updated>2014-04-26T16:29:48+08:00</updated>
    <id>http://KingWa.github.io/blog/2014/04/26/support-latex-in-octopress</id>
    <content type="html"><![CDATA[<p>There are many posts introducing how to support Latex in Octopress, and how to display math formulars in web pages, bellow is what I have done.</p>

<h2 id="mathjx">MathJX</h2>
<p>Many websites use <a href="www.mathjax.org">MathJX</a> to display math symbols and formulars. MathJX is an open source JavaScript display engine for mathematics works in all browsers. Because it was writted in JavaScript, it does not require browser plugins to display math symbols, and it is indeed very attracted in developers and users’ eyes.</p>

<h2 id="how-do-math-stackexchange-do">How do Math StackExchange do?</h2>
<p>Math StackExchange use following javascript code to config the MathJX engine:</p>
<div>
  <pre><code class="JavaScript">&lt;script type=&quot;text/x-mathjax-config&quot;&gt;
    MathJax.Hub.Config({&quot;HTML-CSS&quot;: { preferredFont: &quot;TeX&quot;, availableFonts: [&quot;STIX&quot;,&quot;TeX&quot;], linebreaks: { automatic:true }, EqnChunk:(MathJax.Hub.Browser.isMobile ? 10 : 50) },
                        tex2jax: { inlineMath: [ [&quot;$&quot;, &quot;$&quot;], [&quot;\\\\(&quot;,&quot;\\\\)&quot;] ], displayMath: [ [&quot;$$&quot;,&quot;$$&quot;], [&quot;\\[&quot;, &quot;\\]&quot;] ], processEscapes: true,ignoreClass: &quot;tex2jax_ignore|dno&quot; },
                        TeX: {  noUndefined: { attributes: { mathcolor: &quot;red&quot;, mathbackground: &quot;#FFEEEE&quot;, mathsize: &quot;90%&quot; } }, Macros: { href: &quot;{}&quot; } },
                        messageStyle: &quot;none&quot;
                      });
&lt;/script&gt;
&lt;script src=&quot;http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS_HTML-full&quot;&gt;&lt;/script&gt;</code></pre>
</div>

<h2 id="would-markdowns-format-overlays-with-latex">Would markdown’s format overlays with LaTex?</h2>
<p>Actually, yes. Some standard markdown’s format does. However, Kramdown does support an additional syntax feature to support Latex, as the <a href="http://kramdown.gettalong.org/syntax.html\#math-blocks">ducument</a> said.</p>
<div>
  <pre><code class="text">A math block needs to start and end on block boundaries. It is started using two dollar signs, optionally indented up to three spaces. The math block continues until the next two dollar signs(which may be on the same line or on one of the next lines) that appear at the end of a line. The content of a math block has to be valid LaTex math. It is always wrapped inside a \begin{displaymath}...\end{displaymath} environtment except if it begins with a \begin statement.

Using inline math is also easy: just surround your math content with two dollar signs, like with a math block.</code></pre>
</div>

<h2 id="overall-how-to-do">Overall, how to do?</h2>
<ul>
  <li>Config the MathJX engine in each html files head as follow:</li>
</ul>
<div>
  <pre><code class="JavaScript">&lt;script type=&quot;text/x-mathjax-config&quot;&gt;
    MathJax.Hub.Config({
        text2jax: { inlineMath: [ [&quot;$&quot;, &quot;$&quot;], [&quot;\\\\(&quot;, &quot;\\\\)&quot;] ], displayMath: [ [&quot;$$&quot;, &quot;$$&quot;], [&quot;\\[&quot;, &quot;\\]&quot;] ], processEscapes: true }
    });
&lt;/script&gt;
&lt;script src=&quot;http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS_HTML-full&quot;&gt;&lt;/script&gt;</code></pre>
</div>

<ul>
  <li>Change the config markdown engine to kramdown in “_config.yml”.
That’s all. Let’s have some exmaples.</li>
</ul>

<ol>
  <li>Show a complex math block:</li>
</ol>
<div>
  <pre><code class="text">$$
\begin{align*}
  &amp; \phi(x,y) = \phi \left(\sum_{i=1}^n x_ie_i, \sum_{j=1}^n y_je_j \right)
  = \sum_{i=1}^n \sum_{j=1}^n x_i y_j \phi(e_i, e_j) = \\
  &amp; (x_1, \ldots, x_n) \left( \begin{array}{ccc}
      \phi(e_1, e_1) &amp; \cdots &amp; \phi(e_1, e_n) \\
      \vdots &amp; \ddots &amp; \vdots \\
      \phi(e_n, e_1) &amp; \cdots &amp; \phi(e_n, e_n)
    \end{array} \right)
  \left( \begin{array}{c}
       y_1 \\
       \vdots \\
       y_n
    \end{array} \right)
\end{align*}
$$</code></pre>
</div>

<script type="math/tex; mode=display">% &lt;![CDATA[

\begin{align*}
  & \phi(x,y) = \phi \left(\sum_{i=1}^n x_ie_i, \sum_{j=1}^n y_je_j \right)
  = \sum_{i=1}^n \sum_{j=1}^n x_i y_j \phi(e_i, e_j) = \\
  & (x_1, \ldots, x_n) \left( \begin{array}{ccc}
      \phi(e_1, e_1) & \cdots & \phi(e_1, e_n) \\
      \vdots & \ddots & \vdots \\
      \phi(e_n, e_1) & \cdots & \phi(e_n, e_n)
    \end{array} \right)
  \left( \begin{array}{c}
       y_1 \\
       \vdots \\
       y_n
    \end{array} \right)
\end{align*}
 %]]&gt;</script>

<ol>
  <li>Show an inline math:</li>
</ol>
<div>
  <pre><code class="text">this is an inline math: $$ x=y+z $$.</code></pre>
</div>

<p>this is an inline math: <script type="math/tex"> x=y+z </script>.</p>

<p>How about this one: $$ x=y+z $$.</p>

<p>And how about this: $$ x=y+z $$.</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Blog=Github+Octopress]]></title>
    <link href="http://KingWa.github.io/blog/2014/04/24/blog-equals-github-plus-octopress/"/>
    <updated>2014-04-24T22:44:20+08:00</updated>
    <id>http://KingWa.github.io/blog/2014/04/24/blog-equals-github-plus-octopress</id>
    <content type="html"><![CDATA[<h2 id="why-i-write-blogs">Why I write blogs</h2>
<p>Actually, I am not a blog heavy writer. I use blog most as a tool to write down my thoughts, my experience and my notes.</p>

<h2 id="why-i-choose-github-and-octopress">Why I choose Github and Octopress</h2>
<p>A blog should provides following functions as I see:</p>

<ol>
  <li>
    <p>Full freedom to control content of all blog post, ease to access and migrate the content. [Github][gh] is an ideal place to host a blog for it provides free disk space and free version control service, and most of all it is becoming the facebook for hackers.
[gh]:github.com</p>
  </li>
  <li>
    <p>Ability to embed code snippets. [Jekyll][jk] and [Octopress][oc] both suit.
[jk]:jekyllrb.com 
[oc]:octopress.org</p>
  </li>
  <li>
    <p>Ability to support latex. This is what I really like. </p>
  </li>
</ol>

<h2 id="how-i-built-up-this-blog">How I built up this blog</h2>
<p>There are many blog posts that guides how to build up a blog with Github and Octopress, links below are where I have got tips from:</p>

<ol>
  <li><a href="http://chuchao333.github.io/blog/2012/07/25/octopress-and-github/">ChuChao333</a></li>
  <li><a href="http://code.dblock.org/octopress-setting-up-a-blog-and-contributing-to-an-existing-one">dblock</a></li>
  <li><a href="http://www.gerardcondon.com/blog/2012/03/04/setting-up-octopress-and-github/">gerardcondon</a></li>
  <li><a href="octopress.org">octopress</a></li>
</ol>

<p>Below are my steps:</p>

<h2 id="install-ruby">Install Ruby</h2>
<p>Octopress is a blogging framework based on Jekyll and which is written in Ruby. I am very new to Ruby, so I just followed other’s introduction to install Ruby by <a href="rvm.io">RVM</a>.</p>

<p>RVM(Ruby Version Manager), as its name says, is a software platform designed to manage multiple installations of Rury on the same device. Before installing RVM, we need to check whether following softwares are already installed.</p>
<div>
  <pre><code class="shell">bash, awk, sed, grep, ls, cp, tar, curl, gunzip, bunzip2, git, svn</code></pre>
</div>

<p>After requirements were meet, use following command to install RVM:</p>
<div>
  <pre><code class="shell">caojinghua@debian:~$ \curl -sSL https://get.rvm.io | bash -s stable --ruby</code></pre>
</div>

<p>Above is the Single-User installation, which means the rvm is installed in the current user’s home directory, that is ‘~/.rvm’. After this, we should use following command to load RVM:</p>
<div>
  <pre><code class="shell">caojinghua@debian:~$ source ~/.rvm/scripts/rvm</code></pre>
</div>

<p>Use following command to test whether RVM is installed successfully:</p>
<div>
  <pre><code class="shell">caojinghua@debian:~$ type rvm | head -n 1</code></pre>
</div>

<p>After RVM was installed, we install Ruby 1.9.3 as follows:</p>
<div>
  <pre><code class="shell">caojinghua@debian:~$ rvm install 1.9.3</code></pre>
</div>

<p>We set this version of Ruby to use as the default for new shells:</p>
<div>
  <pre><code class="shell">caojinghua@debian:~$ rvm use 1.9.3 --default</code></pre>
</div>

<p>To test whether Ruby was installed successfully:</p>
<div>
  <pre><code class="shell">caojinghua@debian:~$ ruby -v</code></pre>
</div>

<h2 id="install-octopress">Install Octopress</h2>
<p>Clone the git repository of Octopress:</p>
<div>
  <pre><code class="shell">caojinghua@debian:~/myworkstation$ git clone git://github.com/imathis/octopress.git octopress
caojinghua@debian:~/myworkstation$ cd octopress/</code></pre>
</div>

<p>Next, install Octopress’s dependencies:</p>
<div>
  <pre><code class="shell">caojinghua@debian:~/myworkstation/octopress$ gem install bundler
caojinghua@debian:~/myworkstation/octopress$ bundle install</code></pre>
</div>

<p>It was the last command that I have wait a long time for, due to my unstable network speed.</p>

<p>Next, install Octopress’s default theme: </p>
<div>
  <pre><code class="shell">caojinghua@debian:~/myworkstation/octopress$ rake install</code></pre>
</div>

<p>By now we have installed Octopress successfully.</p>

<h2 id="create-a-new-repository-in-github-for-the-blog">Create a new repository in GitHub for the blog</h2>
<p>We need a repository in GitHub that stores all static web pages and source files of the blog, and Github would show these pages in such an URL: <em>uername</em>.github.io, where <em>username</em> is the name of your Github account, and the repository’s name should follow this format: <em>username</em>.github.io.</p>

<h2 id="configure-octopress-to-the-github-repository">Configure Octopress to the Github repository</h2>
<p>The octopress repository we installed previouly contains several tasks to generate our blog. Use following task to generate a blog:</p>
<div>
  <pre><code class="shell">caojinghua@debian:~/myworkstation/octopress$ rake setup_github_pages</code></pre>
</div>

<p>Several things were done in this command:</p>

<ol>
  <li>Since the remote origin points to “git://github.com/imathis/octopress.git”, it set up a new remote reference name “octopress” that points to “git://github.com/imathis/octopress.git”.</li>
  <li>Change the remote origin points to “git@github.com:<em>username</em>/<em>username</em>.github.io.git”, so as to attach to the github repository while doing “git pull or git push” commands.</li>
  <li>Rename octopress repository’s master branch to “source”. So while doing “git push origin source”, all updated objects in the local source branch would be pushed into the remote github repository(<em>username</em>.github.io)’s source branch. And we have successfully make the local octopress source branch mapping to the remote <em>username</em>.github.io repository’s source branch. Each time we have update in this source branch, we should push it to the corresponding remote branch.</li>
  <li>Create a directory “_deploy” within the octopress directory, and git clone the <em>username</em>.github.io repository’s master branch into this “_deploy” directory. “_deploy” directory contains all files generated by octopress and that are ready to show as web pages. Each time we have updated blog post, we should regenerate files, and git push “_deploy” directory’s files to remote <em>username</em>.github.io ‘s master branch, that’s where Github grap web pages from to show our blog.</li>
</ol>

<h2 id="generate-post-and-deploy">Generate post and deploy</h2>
<p>Now, all is ready. We use following task to generate a new post:</p>
<div>
  <pre><code class="shell">caojinghua@debian:~/myworkstation/octopress$ rake new_post[&quot;*title*&quot;]</code></pre>
</div>

<p>Use following task to regenerate all files:</p>
<div>
  <pre><code class="shell">caojinghua@debian:~/myworkstation/octopress$ rake generate</code></pre>
</div>

<p>This task would scan files within “source” directory, and output all generated files in “public” directory. After that, we should git push updated contents to remote <em>username</em>.github.io ‘s source branch by:</p>
<div>
  <pre><code class="shell">caojinghua@debian:~/myworkstation/octopress$ git add .
caojinghua@debian:~/myworkstation/octopress$ git commit -m &quot;blog post update&quot;
caojinghua@debian:~/myworkstation/octopress$ git push origin source</code></pre>
</div>

<p>Next, we can deploy our blog by:</p>
<div>
  <pre><code class="shell">caojinghua@debian:~/myworkstation/octopress$ rake deploy</code></pre>
</div>

<p>This task would commit all updated content in “_deploy” directory, and git push it to the remote <em>username</em>.github.io ‘s master branch.</p>

<h2 id="summary">Summary</h2>
<p>I think several ponts are important during this building process:</p>

<ol>
  <li>Master git, at least understand the essence of git.</li>
  <li>Try to use ssh to connect to github repository.</li>
  <li>Patience is needed.</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Welcome]]></title>
    <link href="http://KingWa.github.io/blog/2014/04/24/welcome/"/>
    <updated>2014-04-24T14:00:40+08:00</updated>
    <id>http://KingWa.github.io/blog/2014/04/24/welcome</id>
    <content type="html"><![CDATA[<p>Welcome to my blog.</p>
]]></content>
  </entry>
  
</feed>
